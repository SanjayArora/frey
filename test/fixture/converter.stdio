--> Frey version '0.3.15'
--> Will run: [ 'init', 'config', 'deps', 'convert', 'format' ]
--> {hostname} - init
--> {hostname} - config
--> {hostname} - deps
--> {hostname} - convert
--> Skipping confirmation for 'About to convert existing YAML, CFG and TF to TOML files in your project dir. Make sure your files are under source control as this is a best-effort procedure. May I proceed?' as '--force-yes' applies
Traceback (most recent call last):
  File "{home}/.frey/tools/pyhcl/0.2.0/pip/bin/hcltool", line 45, in <module>
    main()
  File "{home}/.frey/tools/pyhcl/0.2.0/pip/bin/hcltool", line 35, in main
    obj = hcl.load(infile)
  File "{home}/.frey/tools/pyhcl/0.2.0/pip/lib/python2.7/site-packages/hcl/api.py", line 51, in load
    return loads(fp.read())
  File "{home}/.frey/tools/pyhcl/0.2.0/pip/lib/python2.7/site-packages/hcl/api.py", line 62, in loads
    return HclParser().parse(s)
  File "{home}/.frey/tools/pyhcl/0.2.0/pip/lib/python2.7/site-packages/hcl/parser.py", line 287, in parse
    return self.yacc.parse(s, lexer=Lexer())
  File "{home}/.frey/tools/pyhcl/0.2.0/pip/lib/python2.7/site-packages/ply/yacc.py", line 265, in parse
    return self.parseopt_notrack(input,lexer,debug,tracking,tokenfunc)
  File "{home}/.frey/tools/pyhcl/0.2.0/pip/lib/python2.7/site-packages/ply/yacc.py", line 971, in parseopt_notrack
    p.callable(pslice)
  File "{home}/.frey/tools/pyhcl/0.2.0/pip/lib/python2.7/site-packages/hcl/parser.py", line 103, in p_object_0
    p[0] = self.objectlist_flat(p[2])
  File "{home}/.frey/tools/pyhcl/0.2.0/pip/lib/python2.7/site-packages/hcl/parser.py", line 70, in objectlist_flat
    for k2, v2 in iteritems(vv):
  File "{home}/.frey/tools/pyhcl/0.2.0/pip/lib/python2.7/site-packages/hcl/parser.py", line 27, in iteritems
    return iter(d.iteritems())
AttributeError: 'int' object has no attribute 'iteritems'
{
    "output": {
        "public_address": {
            "value": "${aws_instance.infra-tusd-server.0.public_dns}"
        },
        "public_addresses": {
            "value": "${join(\"\n\", aws_instance.infra-tusd-server.*.public_dns)}"
        }
    },
    "provider": {
        "aws": {
            "access_key": "${var.TSD_AWS_ACCESS_KEY}",
            "region": "us-east-1",
            "secret_key": "${var.TSD_AWS_SECRET_KEY}"
        }
    },
    "resource": {
        "aws_instance": {
            "infra-tusd-server": {
                "ami": "${lookup(var.ami, var.region)}",
                "connection": {
                    "key_file": "${var.TSD_SSH_KEY_FILE}",
                    "user": "ubuntu"
                },
                "instance_type": "c3.large",
                "key_name": "${var.TSD_SSH_KEY_NAME}",
                "security_groups": [
                    "fw-infra-tusd-main"
                ],
                "tags": {
                    "Name": "${var.TSD_DOMAIN}"
                }
            }
        },
        "aws_route53_record": {
            "www": {
                "name": "${var.TSD_DOMAIN}",
                "records": [
                    "${aws_instance.infra-tusd-server.public_dns}"
                ],
                "ttl": "300",
                "type": "CNAME",
                "zone_id": "${var.TSD_AWS_ZONE_ID}"
            }
        },
        "aws_security_group": {
            "fw-infra-tusd-main": {
                "description": "Infra tusd",
                "ingress": {
                    "cidr_blocks": [
                        "${var.ip_all}"
                    ],
                    "from_port": 8080,
                    "protocol": "tcp",
                    "to_port": 8080
                },
                "name": "fw-infra-tusd-main"
            }
        }
    },
    "variable": {
        "TSD_AWS_ACCESS_KEY": {
            "description": "TSD_AWS_ACCESS_KEY"
        },
        "TSD_AWS_SECRET_KEY": {
            "description": "TSD_AWS_SECRET_KEY"
        },
        "TSD_AWS_ZONE_ID": {
            "description": "TSD_AWS_ZONE_ID"
        },
        "TSD_DOMAIN": {
            "description": "TSD_DOMAIN"
        },
        "TSD_SSH_KEY_FILE": {
            "description": "TSD_SSH_KEY_FILE"
        },
        "TSD_SSH_KEY_NAME": {
            "description": "TSD_SSH_KEY_NAME"
        },
        "TSD_SSH_USER": {
            "description": "TSD_SSH_USER"
        },
        "ami": {
            "default": {
                "us-east-1": "ami-9bce7af0"
            }
        },
        "ip_all": {
            "default": "0.0.0.0/0",
            "description": "ip_all"
        },
        "ip_kevin": {
            "default": "62.163.187.106/32",
            "description": "ip_kevin"
        },
        "ip_marius": {
            "default": "84.146.5.70/32",
            "description": "ip_marius"
        },
        "ip_tim": {
            "default": "24.134.75.132/32",
            "description": "ip_tim"
        },
        "region": {
            "default": "us-east-1",
            "description": "The region of AWS, for AMI lookups."
        }
    }
}
--> {hostname} - format
--> Skipping confirmation for 'About to rewrite all TOML files in your project dir. Make sure your files are under source control as this is a best-effort procedure. May I proceed?' as '--force-yes' applies
[global]

[global.ansiblecfg]

[global.ansiblecfg.defaults]

[global.ansiblecfg.ssh_connection]
  ssh_args = "-o ControlMaster=auto -o ControlPersist=60s"

[infra]

[infra.output]

[infra.output.public_address]
  value = "${aws_instance.infra-tusd-server.0.public_dns}"

[infra.output.public_addresses]
  value = "${join(\"\n\", aws_instance.infra-tusd-server.*.public_dns)}"

[infra.provider]

[infra.provider.aws]
  access_key = "${var.TSD_AWS_ACCESS_KEY}"
  region = "us-east-1"
  secret_key = "${var.TSD_AWS_SECRET_KEY}"

[infra.resource]

[infra.resource.aws_instance]

[infra.resource.aws_instance.infra-tusd-server]
  ami = "${lookup(var.ami, var.region)}"
  instance_type = "c3.large"
  key_name = "${var.TSD_SSH_KEY_NAME}"
  security_groups = ["fw-infra-tusd-main"]

  [infra.resource.aws_instance.infra-tusd-server.connection]
    key_file = "${var.TSD_SSH_KEY_FILE}"
    user = "ubuntu"

  [infra.resource.aws_instance.infra-tusd-server.tags]
    Name = "${var.TSD_DOMAIN}"

[infra.resource.aws_route53_record]

[infra.resource.aws_route53_record.www]
  name = "${var.TSD_DOMAIN}"
  records = ["${aws_instance.infra-tusd-server.public_dns}"]
  ttl = "300"
  type = "CNAME"
  zone_id = "${var.TSD_AWS_ZONE_ID}"

[infra.resource.aws_security_group]

[infra.resource.aws_security_group.fw-infra-tusd-main]
  description = "Infra tusd"
  name = "fw-infra-tusd-main"

  [infra.resource.aws_security_group.fw-infra-tusd-main.ingress]
    cidr_blocks = ["${var.ip_all}"]
    from_port = 8080.0
    protocol = "tcp"
    to_port = 8080.0

[infra.variable]

[infra.variable.TSD_AWS_ACCESS_KEY]
  description = "TSD_AWS_ACCESS_KEY"

[infra.variable.TSD_AWS_SECRET_KEY]
  description = "TSD_AWS_SECRET_KEY"

[infra.variable.TSD_AWS_ZONE_ID]
  description = "TSD_AWS_ZONE_ID"

[infra.variable.TSD_DOMAIN]
  description = "TSD_DOMAIN"

[infra.variable.TSD_SSH_KEY_FILE]
  description = "TSD_SSH_KEY_FILE"

[infra.variable.TSD_SSH_KEY_NAME]
  description = "TSD_SSH_KEY_NAME"

[infra.variable.TSD_SSH_USER]
  description = "TSD_SSH_USER"

[infra.variable.ami]

[infra.variable.ami.default]
  us-east-1 = "ami-9bce7af0"

[infra.variable.ip_all]
  default = "0.0.0.0/0"
  description = "ip_all"

[infra.variable.ip_kevin]
  default = "62.163.187.106/32"
  description = "ip_kevin"

[infra.variable.ip_marius]
  default = "84.146.5.70/32"
  description = "ip_marius"

[infra.variable.ip_tim]
  default = "24.134.75.132/32"
  description = "ip_tim"

[infra.variable.region]
  default = "us-east-1"
  description = "The region of AWS, for AMI lookups."

[install]

[[install.playbooks]]
  name = "Install infra-tusd-server"
  hosts = "infra-tusd-server"

  [[install.playbooks.tasks]]
    name = "Common | Add US APT Mirrors"
    action = "template src=templates/sources.list dest=/etc/apt/sources.list"
    register = "apt_sources"

  [[install.playbooks.tasks]]
    name = "Common | Update APT"
    apt = "upgrade=dist cache_valid_time=3600 update_cache=yes dpkg_options='force-confold,force-confdef'"
    when = "apt_sources|changed"

  [[install.playbooks.tasks]]
    name = "Common | Install Packages"
    apt = "pkg={{ item }} state=present"
    with_items = ["apg", "build-essential", "curl", "git-core", "htop", "iotop", "libpcre3", "logtail", "mlocate", "mtr", "mysql-client", "psmisc", "telnet", "vim", "wget"]

  [[install.playbooks.tasks]]
    name = "Common | Add convenience shortcut wtf"
    action = "lineinfile dest=/home/ubuntu/.bashrc line=\"alias wtf='sudo tail -f /var/log/*{log,err} /var/log/{dmesg,messages,*{,/*}{log,err}}'\""

  [[install.playbooks.tasks]]
    name = "tusd | Create approot"
    file = "path=/srv/tusd/current state=directory owner=www-data group=www-data mode=0755 recurse=yes"

  [[install.playbooks.tasks]]
    name = "tusd | Download binary"
    action = "copy src=templates/tusd dest=/srv/tusd/current/tusd mode=0755"

  [[install.playbooks.tasks]]
    name = "tusd | Create dataroot"
    file = "path=/mnt/tusd-data state=directory owner=www-data group=www-data mode=0755 recurse=yes"

  [[install.playbooks.tasks]]
    name = "tusd | Upload environment"
    action = "template src=templates/env dest=/srv/tusd/current/env.sh mode=0600 owner=root group=root"

  [[install.playbooks.tasks]]
    name = "tusd | Install upstart file"
    action = "template src=templates/upstart-tusd dest=/etc/init/tusd.conf"

  [[install.playbooks.tasks]]
    name = "tusd | Restart"
    action = "service name=tusd state=restarted"
Done
[global]

[global.ansiblecfg]

[global.ansiblecfg.defaults]

[global.ansiblecfg.ssh_connection]
  ssh_args = "-o ControlMaster=auto -o ControlPersist=60s"

[infra]

[infra.output]

[infra.output.public_address]
  value = "${aws_instance.infra-tusd-server.0.public_dns}"

[infra.output.public_addresses]
  value = "${join(\"\n\", aws_instance.infra-tusd-server.*.public_dns)}"

[infra.provider]

[infra.provider.aws]
  access_key = "${var.TSD_AWS_ACCESS_KEY}"
  region = "us-east-1"
  secret_key = "${var.TSD_AWS_SECRET_KEY}"

[infra.resource]

[infra.resource.aws_instance]

[infra.resource.aws_instance.infra-tusd-server]
  ami = "${lookup(var.ami, var.region)}"
  instance_type = "c3.large"
  key_name = "${var.TSD_SSH_KEY_NAME}"
  security_groups = ["fw-infra-tusd-main"]

  [infra.resource.aws_instance.infra-tusd-server.connection]
    key_file = "${var.TSD_SSH_KEY_FILE}"
    user = "ubuntu"

  [infra.resource.aws_instance.infra-tusd-server.tags]
    Name = "${var.TSD_DOMAIN}"

[infra.resource.aws_route53_record]

[infra.resource.aws_route53_record.www]
  name = "${var.TSD_DOMAIN}"
  records = ["${aws_instance.infra-tusd-server.public_dns}"]
  ttl = "300"
  type = "CNAME"
  zone_id = "${var.TSD_AWS_ZONE_ID}"

[infra.resource.aws_security_group]

[infra.resource.aws_security_group.fw-infra-tusd-main]
  description = "Infra tusd"
  name = "fw-infra-tusd-main"

  [infra.resource.aws_security_group.fw-infra-tusd-main.ingress]
    cidr_blocks = ["${var.ip_all}"]
    from_port = 8080.0
    protocol = "tcp"
    to_port = 8080.0

[infra.variable]

[infra.variable.TSD_AWS_ACCESS_KEY]
  description = "TSD_AWS_ACCESS_KEY"

[infra.variable.TSD_AWS_SECRET_KEY]
  description = "TSD_AWS_SECRET_KEY"

[infra.variable.TSD_AWS_ZONE_ID]
  description = "TSD_AWS_ZONE_ID"

[infra.variable.TSD_DOMAIN]
  description = "TSD_DOMAIN"

[infra.variable.TSD_SSH_KEY_FILE]
  description = "TSD_SSH_KEY_FILE"

[infra.variable.TSD_SSH_KEY_NAME]
  description = "TSD_SSH_KEY_NAME"

[infra.variable.TSD_SSH_USER]
  description = "TSD_SSH_USER"

[infra.variable.ami]

[infra.variable.ami.default]
  us-east-1 = "ami-9bce7af0"

[infra.variable.ip_all]
  default = "0.0.0.0/0"
  description = "ip_all"

[infra.variable.ip_kevin]
  default = "62.163.187.106/32"
  description = "ip_kevin"

[infra.variable.ip_marius]
  default = "84.146.5.70/32"
  description = "ip_marius"

[infra.variable.ip_tim]
  default = "24.134.75.132/32"
  description = "ip_tim"

[infra.variable.region]
  default = "us-east-1"
  description = "The region of AWS, for AMI lookups."

[install]

[[install.playbooks]]
  name = "Install infra-tusd-server"
  hosts = "infra-tusd-server"

  [[install.playbooks.tasks]]
    name = "Common | Add US APT Mirrors"
    action = "template src=templates/sources.list dest=/etc/apt/sources.list"
    register = "apt_sources"

  [[install.playbooks.tasks]]
    name = "Common | Update APT"
    apt = "upgrade=dist cache_valid_time=3600 update_cache=yes dpkg_options='force-confold,force-confdef'"
    when = "apt_sources|changed"

  [[install.playbooks.tasks]]
    name = "Common | Install Packages"
    apt = "pkg={{ item }} state=present"
    with_items = ["apg", "build-essential", "curl", "git-core", "htop", "iotop", "libpcre3", "logtail", "mlocate", "mtr", "mysql-client", "psmisc", "telnet", "vim", "wget"]

  [[install.playbooks.tasks]]
    name = "Common | Add convenience shortcut wtf"
    action = "lineinfile dest=/home/ubuntu/.bashrc line=\"alias wtf='sudo tail -f /var/log/*{log,err} /var/log/{dmesg,messages,*{,/*}{log,err}}'\""

  [[install.playbooks.tasks]]
    name = "tusd | Create approot"
    file = "path=/srv/tusd/current state=directory owner=www-data group=www-data mode=0755 recurse=yes"

  [[install.playbooks.tasks]]
    name = "tusd | Download binary"
    action = "copy src=templates/tusd dest=/srv/tusd/current/tusd mode=0755"

  [[install.playbooks.tasks]]
    name = "tusd | Create dataroot"
    file = "path=/mnt/tusd-data state=directory owner=www-data group=www-data mode=0755 recurse=yes"

  [[install.playbooks.tasks]]
    name = "tusd | Upload environment"
    action = "template src=templates/env dest=/srv/tusd/current/env.sh mode=0600 owner=root group=root"

  [[install.playbooks.tasks]]
    name = "tusd | Install upstart file"
    action = "template src=templates/upstart-tusd dest=/etc/init/tusd.conf"

  [[install.playbooks.tasks]]
    name = "tusd | Restart"
    action = "service name=tusd state=restarted"Finished
