#!upstart

# {{ ansible_managed }}

description "{{ upstart_description }}"

{% if upstart_environment is iterable %}
{%   for environment_variable in upstart_environment %}
{% if upstart_environment_global %}export{% else %}env{% endif %} {{ environment_variable.name }}={{ environment_variable.value }}
{%   endfor %}
{% endif %}

{% for event in upstart_start_on %}
start on {{ event }}
{% endfor %}

{% for event in upstart_stop_on %}
stop on {{ event }}
{% endfor %}

{% if upstart_respawn %}
respawn
{% endif %}

{% if upstart_respawn_limit %}
respawn limit {{ upstart_respawn_limit_count }} {{ upstart_respawn_limit_interval }}
{% endif %}

{% if upstart_file_descriptor_limit %}
limit nofile {{ upstart_file_descriptor_limit }} {{ upstart_file_descriptor_limit }}
{% endif %}

pre-start script
{% if upstart_command %}
  [ -f "{{upstart_runtime_root}}/env.sh" ] || touch "{{upstart_runtime_root}}/env.sh"
{% endif %}
{% if upstart_pre_start is iterable %}
{%   for command in upstart_pre_start %}
  {{ command  }}
{%   endfor %}
{% endif %}
end script

{% if upstart_command %}
script
  set -e
  set -x
  mkfifo /tmp/{{upstart_name}}-log-fifo
  ( logger -t {{upstart_name}} </tmp/{{upstart_name}}-log-fifo & )
  exec >/tmp/{{upstart_name}}-log-fifo
  rm /tmp/{{upstart_name}}-log-fifo
  exec bash -c "cd {{upstart_runtime_root}} \
    && chown root.root env.sh \
    && chmod 600 env.sh \
    && source env.sh \
    && exec sudo -EHu {{upstart_user}} env PATH=${PATH} LD_LIBRARY_PATH=${LD_LIBRARY_PATH} {{upstart_command}} 2>&1"
end script
{% elif upstart_script is iterable %}
script
{%   for command in upstart_script %}
  {{ command }}
{%   endfor %}
end script
{% else %}
exec start-stop-daemon --start --chuid {{ upstart_user }} --group {{ upstart_group }} --make-pidfile --pidfile {{ upstart_pidfile_path }} --exec {{ upstart_exec_path }}{{ ' -- '~upstart_exec_flags|join(' ') if upstart_exec_flags else '' }} {{ '2>&1' if upstart_capture_errors else '' }} >> {{ upstart_log_path }}
{% endif %}

{% if upstart_command %}
post-start script
  PID=`status {{upstart_name}} | egrep -oi '([0-9]+)$' | head -n1`
  echo ${PID} > {{ upstart_pidfile_path }}
end script
{% endif %}

post-stop script
  rm -f {{ upstart_pidfile_path }}
{% if upstart_post_stop is iterable %}
{%   for command in upstart_post_stop %}
  {{ command }}
{%   endfor %}
{% endif %}
end script
